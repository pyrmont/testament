(def info (-> (slurp "info.jdn") parse))

(declare-project
  :name (info :name)
  :description (info :description)
  :author (info :author)
  :license (info :license)
  :url (info :url)
  :repo (info :repo)
  :dependencies (info :dependencies))

(task "bundle-install" ["manifest"]
  (def lman-path (find-manifest (info :name)))
  (def lman-data (when (= :file (os/stat lman-path :mode))
                   (parse (slurp lman-path))))
  (assert lman-data "no legacy manifest file")
  (if (bundle/installed? (info :name))
    (bundle/replace (info :name) ".")
    (bundle/install "."))
  (def bdir-path (-> (string/slice (find-manifest-dir) 0 -11)
                     (string "bundle/" (info :name))))
  (def bman-path (string bdir-path "/manifest.jdn"))
  (def bman-data (when (= :file (os/stat bman-path :mode))
                   (parse (slurp bman-path))))
  (assert bman-data "no bundle manifest file")
  (each p (reverse (bman-data :files))
    (array/push (lman-data :paths) p))
  (array/push (lman-data :paths) bdir-path)
  (spit lman-path (string/format "%j\n" lman-data))
  (array/push (bman-data :files) lman-path)
  (spit bman-path (string/format "%j\n" bman-data)))

(add-input "install" "bundle-install")
